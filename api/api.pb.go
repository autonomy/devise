// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api.proto

/*
Package api is a generated protocol buffer package.

It is generated from these files:
	api.proto

It has these top-level messages:
	OpenTemplateRequest
	OpenTemplateReply
	RenderTemplateRequest
	RenderTemplateReply
*/
package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// The request message containing the templated template.
type OpenTemplateRequest struct {
}

func (m *OpenTemplateRequest) Reset()                    { *m = OpenTemplateRequest{} }
func (m *OpenTemplateRequest) String() string            { return proto.CompactTextString(m) }
func (*OpenTemplateRequest) ProtoMessage()               {}
func (*OpenTemplateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// The response message containing the rendered template.
type OpenTemplateReply struct {
	Template   []byte `protobuf:"bytes,1,opt,name=template,proto3" json:"template,omitempty"`
	VaultToken string `protobuf:"bytes,2,opt,name=vault_token,json=vaultToken" json:"vault_token,omitempty"`
}

func (m *OpenTemplateReply) Reset()                    { *m = OpenTemplateReply{} }
func (m *OpenTemplateReply) String() string            { return proto.CompactTextString(m) }
func (*OpenTemplateReply) ProtoMessage()               {}
func (*OpenTemplateReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *OpenTemplateReply) GetTemplate() []byte {
	if m != nil {
		return m.Template
	}
	return nil
}

func (m *OpenTemplateReply) GetVaultToken() string {
	if m != nil {
		return m.VaultToken
	}
	return ""
}

// The request message containing the templated template.
type RenderTemplateRequest struct {
	Rendered []byte `protobuf:"bytes,1,opt,name=rendered,proto3" json:"rendered,omitempty"`
}

func (m *RenderTemplateRequest) Reset()                    { *m = RenderTemplateRequest{} }
func (m *RenderTemplateRequest) String() string            { return proto.CompactTextString(m) }
func (*RenderTemplateRequest) ProtoMessage()               {}
func (*RenderTemplateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *RenderTemplateRequest) GetRendered() []byte {
	if m != nil {
		return m.Rendered
	}
	return nil
}

// The response message containing the rendered template.
type RenderTemplateReply struct {
	Success bool `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
}

func (m *RenderTemplateReply) Reset()                    { *m = RenderTemplateReply{} }
func (m *RenderTemplateReply) String() string            { return proto.CompactTextString(m) }
func (*RenderTemplateReply) ProtoMessage()               {}
func (*RenderTemplateReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *RenderTemplateReply) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func init() {
	proto.RegisterType((*OpenTemplateRequest)(nil), "api.OpenTemplateRequest")
	proto.RegisterType((*OpenTemplateReply)(nil), "api.OpenTemplateReply")
	proto.RegisterType((*RenderTemplateRequest)(nil), "api.RenderTemplateRequest")
	proto.RegisterType((*RenderTemplateReply)(nil), "api.RenderTemplateReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Devise service

type DeviseClient interface {
	// Opens the template.
	OpenTemplate(ctx context.Context, in *OpenTemplateRequest, opts ...grpc.CallOption) (*OpenTemplateReply, error)
	// Renders a template.
	RenderTemplate(ctx context.Context, in *RenderTemplateRequest, opts ...grpc.CallOption) (*RenderTemplateReply, error)
}

type deviseClient struct {
	cc *grpc.ClientConn
}

func NewDeviseClient(cc *grpc.ClientConn) DeviseClient {
	return &deviseClient{cc}
}

func (c *deviseClient) OpenTemplate(ctx context.Context, in *OpenTemplateRequest, opts ...grpc.CallOption) (*OpenTemplateReply, error) {
	out := new(OpenTemplateReply)
	err := grpc.Invoke(ctx, "/api.Devise/OpenTemplate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviseClient) RenderTemplate(ctx context.Context, in *RenderTemplateRequest, opts ...grpc.CallOption) (*RenderTemplateReply, error) {
	out := new(RenderTemplateReply)
	err := grpc.Invoke(ctx, "/api.Devise/RenderTemplate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Devise service

type DeviseServer interface {
	// Opens the template.
	OpenTemplate(context.Context, *OpenTemplateRequest) (*OpenTemplateReply, error)
	// Renders a template.
	RenderTemplate(context.Context, *RenderTemplateRequest) (*RenderTemplateReply, error)
}

func RegisterDeviseServer(s *grpc.Server, srv DeviseServer) {
	s.RegisterService(&_Devise_serviceDesc, srv)
}

func _Devise_OpenTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviseServer).OpenTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Devise/OpenTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviseServer).OpenTemplate(ctx, req.(*OpenTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Devise_RenderTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenderTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviseServer).RenderTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Devise/RenderTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviseServer).RenderTemplate(ctx, req.(*RenderTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Devise_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.Devise",
	HandlerType: (*DeviseServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OpenTemplate",
			Handler:    _Devise_OpenTemplate_Handler,
		},
		{
			MethodName: "RenderTemplate",
			Handler:    _Devise_RenderTemplate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

func init() { proto.RegisterFile("api.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 243 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x51, 0xc1, 0x4a, 0x03, 0x31,
	0x10, 0x75, 0x15, 0x6a, 0x3b, 0x2d, 0x82, 0x53, 0x2a, 0x61, 0x2f, 0xd6, 0x9c, 0x7a, 0x5a, 0xc1,
	0xfe, 0xc1, 0xe2, 0xc1, 0x9b, 0x25, 0xf4, 0x2e, 0xb1, 0x3b, 0x87, 0xc5, 0x34, 0x89, 0x9b, 0xa4,
	0xb0, 0x3f, 0xe2, 0xf7, 0x4a, 0xa2, 0x2b, 0x76, 0xc9, 0xf1, 0xbd, 0x37, 0xf3, 0xe6, 0x3d, 0x06,
	0x66, 0xd2, 0xb6, 0x95, 0xed, 0x8c, 0x37, 0x78, 0x25, 0x6d, 0xcb, 0x57, 0xb0, 0x7c, 0xb5, 0xa4,
	0xf7, 0x74, 0xb4, 0x4a, 0x7a, 0x12, 0xf4, 0x19, 0xc8, 0x79, 0xbe, 0x83, 0xdb, 0x73, 0xda, 0xaa,
	0x1e, 0x4b, 0x98, 0xfa, 0x5f, 0x82, 0x15, 0xeb, 0x62, 0xb3, 0x10, 0x7f, 0x18, 0xef, 0x61, 0x7e,
	0x92, 0x41, 0xf9, 0x37, 0x6f, 0x3e, 0x48, 0xb3, 0xcb, 0x75, 0xb1, 0x99, 0x09, 0x48, 0xd4, 0x3e,
	0x32, 0x7c, 0x0b, 0x2b, 0x41, 0xba, 0xa1, 0x6e, 0x74, 0x2a, 0xba, 0x76, 0x49, 0xa0, 0x66, 0x70,
	0x1d, 0x30, 0x7f, 0x84, 0xe5, 0x78, 0x29, 0x06, 0x61, 0x70, 0xed, 0xc2, 0xe1, 0x40, 0xce, 0xa5,
	0x8d, 0xa9, 0x18, 0xe0, 0xd3, 0x57, 0x01, 0x93, 0x67, 0x3a, 0xb5, 0x8e, 0xb0, 0x86, 0xc5, 0xff,
	0x0a, 0xc8, 0xaa, 0x58, 0x3d, 0x53, 0xb6, 0xbc, 0xcb, 0x28, 0x56, 0xf5, 0xfc, 0x02, 0x5f, 0xe0,
	0xe6, 0xfc, 0x3e, 0x96, 0x69, 0x36, 0xdb, 0xa4, 0x64, 0x59, 0x2d, 0x39, 0xd5, 0x0f, 0x80, 0xad,
	0xa9, 0x64, 0xf0, 0x46, 0x9b, 0x63, 0x5f, 0x35, 0x29, 0x63, 0x3d, 0xff, 0xc9, 0xba, 0x8b, 0xff,
	0x78, 0x9f, 0xa4, 0xb7, 0x6c, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0xe7, 0x75, 0xba, 0xab, 0xa3,
	0x01, 0x00, 0x00,
}
